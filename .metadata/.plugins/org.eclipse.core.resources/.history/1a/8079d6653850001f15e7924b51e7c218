#include <iostream>
#include <memory>
#include <set>
#include <vector>
#include <stdexcept>
#include <map>
#include "Product.h"
#include "Warehouse.h"
#include "InventoryManager.h"
#include "WarehouseManager.h"
#include "DiscountAdjuster.h"
#include "WarehouseException.h"

using namespace std;

/**
 * Outputs the failedMessage on the console if condition is false.
 *
 * @param condition the condition
 * @param failedMessage the message
 */
void assertTrue(bool condition, const string& failedMessage) {
    if (!condition) {
        cout << failedMessage << endl;
    }
}

void productTests() {
/**
 * Tests for the Product class. (10 points)
 * - Create a Product instance.
 * - Assert the getters return the expected values.
 * - Change the price and assert the new value.
 */

	Product p("milk","m1",1.29);
	assertTrue(p.getPrice()==1.29,"price getter wrong");
	assertTrue(p.getName()=="milk","name getter wrong");
	p.setPrice(0.99);
	assertTrue(p.getPrice()==0.99,"price getter wrong");



}

void warehouseTests() {
/**
 * Tests for the Warehouse class. (10 points)
 * - Create a Warehouse instance.
 * - Add products to the warehouse and assert they are added correctly.
 * - Remove products by ID and assert they are removed correctly.
 * - Find products by ID and assert the correct product is returned.
 */
}

void inventoryManagerTests() {
/**
 * Tests for the InventoryManager class. (20 points)
 * - Add warehouses to the inventory manager.
 * - Add products to warehouses.
 * - Generate a product report and assert it contains the correct details.
 * - Calculate the total value of all products and assert the correct value.
 */
}

void warehouseManagerTests() {
/**
 * Tests for the WarehouseManager class. (10 points)
 * - Add warehouses and products via the warehouse manager.
 * - Remove products via the warehouse manager.
 */
}

void discountAdjusterTests() {
/**
 * Tests for the DiscountAdjuster class. (15 points)
 * - Add discounts for products.
 * - Adjust product prices based on the discounts and assert the correct adjusted prices.
 */
}

void exceptionHandleTests() {
/**
 * Tests for exception handling. (5 points)
 * - Attempt to remove a product from a non-existent warehouse and catch the exception.
 * - Attempt to perform operations on non-existent products or warehouses and catch the exception.
 */
}

void allTests() {
    productTests();
    warehouseTests();
    inventoryManagerTests();
    warehouseManagerTests();
    discountAdjusterTests();
    exceptionHandleTests();
}

