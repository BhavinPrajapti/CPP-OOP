#include <iostream>
#include <memory>
#include "Event.h"
#include "Concert.h"
#include "Conference.h"
#include "Attendee.h"
#include "EventSystem.h"

using namespace std;

/**
 * Outputs the failedMessage on the console if condition is false.
 *
 * @param condition the condition
 * @param failedMessage the message
 */
void assertTrue(bool condition, const std::string& failedMessage) {
    if (!condition) {
        std::cout << failedMessage << std::endl;
    }
}

/**
 * Tests for the Event class and its derived classes (Concert, Conference). (20 points)
 */
void eventTests() {
    // Create instances of Concert and Conference.
    // 1. Verify the title and description retrieval.
    // 2. Test the `display()` method for different formats.
    // 3. Test additional functionality specific to Concert and Conference.

	//    Concert(const std::string& title, const std::string& description,
 //   const std::string& bandName, const std::string& venue);

	Concert pink("pink concert","for lgbtq","pink band","sttutgart");

	assertTrue(pink.getTitle()=="pink concert","title not matched");
	assertTrue(pink.getDescription()=="for lgbtq","description not matched");

	pink.display();

    // Test Concert specific methods

    // Test display method for Concert

    // Test Conference specific methods

    // Test display method for Conference

}

/**
 * Tests for the Attendee class. (20 points)
 */
void attendeeTests() {
    // Create instances of Attendee.
    // 1. Test the registration and unregistration of events.
    // 2. Verify the list of registered events.


    // Test registration status

    // Test unregistration

    // Test listing registered events
}

/**
 * Tests for the EventSystem class. (20 points)
 */
void eventSystemTests() {
    // Create instances of EventSystem, Event (Concert and Conference), and Attendee.
    // 1. Test adding and listing events and attendees.
    // 2. Test attendee registration for events and verify the event and attendee details.
    // 3. Test searching for events by keyword and verify the results.
    // 4. Test removing events and attendees.

    EventSystem system;

    // Add events


    // Register attendees

    // Register attendees for events

    // Test listing events and attendees

    // Test searching for events

    // Test removing attendees and events

    // Check remaining events and attendees

}

/**
 * Run all tests. (40 points)
 */
void alltest() {
    eventTests();

    attendeeTests();

    eventSystemTests();
}

