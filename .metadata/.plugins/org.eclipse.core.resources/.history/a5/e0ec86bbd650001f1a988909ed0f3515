/*
 * EventSystem.cpp
 *
 *  Created on: 1 Aug 2024
 *      Author: hp
 */

#include "EventSystem.h"

void EventSystem::addEvent(std::unique_ptr<Event> event)
{
	eventManager.addEvent(std::move(event));
}

void EventSystem::registerAttendee(const std::string &name)
{
	std::shared_ptr<Attendee> attendee(new Attendee(name));
	attendees.insert(std::make_pair(name,attendee));
}

void EventSystem::unregisterAttendee(const std::string &name)
{
	auto found=attendees.find(name);
	if(found != attendees.end()) {
		attendees.erase(found);
	}else {
		throw std::invalid_argument(" attendee not exist");
	}

}

void EventSystem::attendeeRegisterForEvent(const std::string &attendeeName,
		const std::string &eventTitle)
{
	auto found=attendees.find(attendeeName);
	if(found != attendees.end()) {

		found->second->registerEvent(eventTitle);
	}else {
		throw std::invalid_argument(" attendee not exist");

	}

}

void EventSystem::attendeeUnregisterFromEvent(const std::string &attendeeName,
		const std::string &eventTitle)
{
	auto found=attendees.find(attendeeName);
	if(found != attendees.end()) {

		found->second->unregisterEvent(eventTitle);
	}else {
		throw std::invalid_argument(" attendee not exist");

	}

}

void EventSystem::listAttendeesForEvent(const std::string &eventTitle) const
{

	eventManager.getEvent(eventTitle)
	for(auto iter = attendees.begin() ; iter != attendees.end() ; ++iter ) {

		if((*iter).second->isRegistered(eventTitle)) {
			std::couz
			std::cout<<(*iter).first;
		}

	}

}

void EventSystem::displayAllEvents() const
{
}

void EventSystem::displayAttendeeDetails(const std::string &attendeeName) const
{
}

void EventSystem::searchEventsByKeyword(const std::string &keyword) const
{
}
